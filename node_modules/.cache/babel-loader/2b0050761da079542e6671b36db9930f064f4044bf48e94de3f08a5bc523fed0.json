{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nexport default {\n  data() {\n    return {\n      email: '',\n      password: '',\n      confirmPassword: ''\n    };\n  },\n  created() {\n    // 페이지가 로드될 때 로컬 스토리지에서 email과 password 셋팅\n    this.email = localStorage.getItem('savedEmail') || '';\n    this.password = localStorage.getItem('savedPassword') || '';\n    this.confirmPassword = localStorage.getItem('savedConfirmPassword') || '';\n  },\n  computed: {\n    isFormValid() {\n      return this.email && this.password && this.confirmPassword && this.password === this.confirmPassword && this.isPassword(this.password);\n    },\n    isPasswordValid() {\n      return this.isPassword(this.password);\n    }\n  },\n  methods: {\n    submitForm() {\n      if (this.isFormValid) {\n        console.log('폼이 제출되었습니다!');\n        // 로컬 스토리지에 email과 password 저장\n        localStorage.setItem('savedEmail', this.email);\n        localStorage.setItem('savedPassword', this.password);\n        localStorage.setItem('savedConfirmPassword', this.confirmPassword);\n        this.$router.push('/secondStep');\n      } else if (this.password !== this.confirmPassword) {\n        alert('비밀번호 확인을 다시 입력해주세요.');\n      }\n      // 비밀번호 유효성 검사를 통과하지 못한 경우 이미 화면에 메시지를 표시하고 있기 때문에 별도의 alert는 필요하지 않습니다.\n    },\n\n    //비밀번호 유효성 검사\n    isPassword(password) {\n      const passwordRegex = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[!@#$%^&*()_+])[A-Za-z\\d!@#$%^&*()_+]{8,}$/;\n      return passwordRegex.test(password);\n    }\n  }\n};","map":{"version":3,"names":["data","email","password","confirmPassword","created","localStorage","getItem","computed","isFormValid","isPassword","isPasswordValid","methods","submitForm","console","log","setItem","$router","push","alert","passwordRegex","test"],"sources":["/Users/kakao/Documents/balaan/src/components/firstStep.vue"],"sourcesContent":["<template>\n  <div>\n    <form @submit.prevent=\"submitForm\">\n      <div>\n        <label for=\"email\">이메일 </label>\n        <input type=\"email\" id=\"email\" v-model=\"email\" required>\n      </div>\n      <div>\n        <label for=\"password\">비밀번호 </label>\n        <input type=\"password\" id=\"password\" v-model=\"password\" required>\n        <div v-if=\"!isPasswordValid && (password || confirmPassword)\">\n          <p>비밀번호는 영문 대문자, 소문자, 숫자, 특수문자를 포함한 8자리 이상의 문자열이어야 합니다.</p>\n        </div>\n      </div>\n      <div>\n        <label for=\"confirmPassword\">비밀번호 확인 </label>\n        <input type=\"password\" id=\"confirmPassword\" v-model=\"confirmPassword\" required>\n      </div>\n      <div>\n        <button :disabled=\"!isFormValid\" type=\"submit\">다음</button>\n      </div>\n    </form>\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      email: '',\n      password: '',\n      confirmPassword: ''\n    };\n  },\n  created() {\n    // 페이지가 로드될 때 로컬 스토리지에서 email과 password 셋팅\n    this.email = localStorage.getItem('savedEmail') || '';\n    this.password = localStorage.getItem('savedPassword') || '';\n    this.confirmPassword = localStorage.getItem('savedConfirmPassword') || '';\n  },\n  computed: {\n    isFormValid() {\n      return (\n        this.email &&\n        this.password &&\n        this.confirmPassword &&\n        this.password === this.confirmPassword &&\n        this.isPassword(this.password)\n      );\n    },\n    isPasswordValid() {\n      return this.isPassword(this.password);\n    }\n  },\n  methods: {\n    submitForm() {\n      if (this.isFormValid) {\n        console.log('폼이 제출되었습니다!');\n        // 로컬 스토리지에 email과 password 저장\n        localStorage.setItem('savedEmail', this.email);\n        localStorage.setItem('savedPassword', this.password);\n        localStorage.setItem('savedConfirmPassword', this.confirmPassword);\n        this.$router.push('/secondStep'); \n      } else if( this.password !== this.confirmPassword) {\n        alert('비밀번호 확인을 다시 입력해주세요.');\n      }\n      // 비밀번호 유효성 검사를 통과하지 못한 경우 이미 화면에 메시지를 표시하고 있기 때문에 별도의 alert는 필요하지 않습니다.\n    },\n    //비밀번호 유효성 검사\n    isPassword(password) {\n      const passwordRegex = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[!@#$%^&*()_+])[A-Za-z\\d!@#$%^&*()_+]{8,}$/;\n      return passwordRegex.test(password);\n    }\n  }\n};\n</script>\n"],"mappings":";AA0BA,eAAe;EACbA,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,KAAK,EAAE,EAAE;MACTC,QAAQ,EAAE,EAAE;MACZC,eAAe,EAAE;IACnB,CAAC;EACH,CAAC;EACDC,OAAOA,CAAA,EAAG;IACR;IACA,IAAI,CAACH,KAAI,GAAII,YAAY,CAACC,OAAO,CAAC,YAAY,KAAK,EAAE;IACrD,IAAI,CAACJ,QAAO,GAAIG,YAAY,CAACC,OAAO,CAAC,eAAe,KAAK,EAAE;IAC3D,IAAI,CAACH,eAAc,GAAIE,YAAY,CAACC,OAAO,CAAC,sBAAsB,KAAK,EAAE;EAC3E,CAAC;EACDC,QAAQ,EAAE;IACRC,WAAWA,CAAA,EAAG;MACZ,OACE,IAAI,CAACP,KAAI,IACT,IAAI,CAACC,QAAO,IACZ,IAAI,CAACC,eAAc,IACnB,IAAI,CAACD,QAAO,KAAM,IAAI,CAACC,eAAc,IACrC,IAAI,CAACM,UAAU,CAAC,IAAI,CAACP,QAAQ;IAEjC,CAAC;IACDQ,eAAeA,CAAA,EAAG;MAChB,OAAO,IAAI,CAACD,UAAU,CAAC,IAAI,CAACP,QAAQ,CAAC;IACvC;EACF,CAAC;EACDS,OAAO,EAAE;IACPC,UAAUA,CAAA,EAAG;MACX,IAAI,IAAI,CAACJ,WAAW,EAAE;QACpBK,OAAO,CAACC,GAAG,CAAC,aAAa,CAAC;QAC1B;QACAT,YAAY,CAACU,OAAO,CAAC,YAAY,EAAE,IAAI,CAACd,KAAK,CAAC;QAC9CI,YAAY,CAACU,OAAO,CAAC,eAAe,EAAE,IAAI,CAACb,QAAQ,CAAC;QACpDG,YAAY,CAACU,OAAO,CAAC,sBAAsB,EAAE,IAAI,CAACZ,eAAe,CAAC;QAClE,IAAI,CAACa,OAAO,CAACC,IAAI,CAAC,aAAa,CAAC;MAClC,OAAO,IAAI,IAAI,CAACf,QAAO,KAAM,IAAI,CAACC,eAAe,EAAE;QACjDe,KAAK,CAAC,qBAAqB,CAAC;MAC9B;MACA;IACF,CAAC;;IACD;IACAT,UAAUA,CAACP,QAAQ,EAAE;MACnB,MAAMiB,aAAY,GAAI,gFAAgF;MACtG,OAAOA,aAAa,CAACC,IAAI,CAAClB,QAAQ,CAAC;IACrC;EACF;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}