{"ast":null,"code":"export default {\n  data() {\n    return {\n      name: '',\n      phoneNumber: '',\n      address: '',\n      extraAddress: ''\n    };\n  },\n  methods: {\n    submitForm() {\n      if (this.validateName(this.name) && this.validatePhoneNumber(this.phoneNumber)) {\n        // 이름과 핸드폰 번호가 유효한 경우에만 처리\n        console.log('폼이 제출되었습니다!');\n        // 다음 단계로 라우팅\n        // this.$router.push('/nextStep');\n      } else {\n        console.log('유효하지 않은 입력입니다.');\n      }\n    },\n    validateName(name) {\n      const nameRegex = /^[가-힣]{2,}|[a-zA-Z]{3,}$/; // 한글 2글자 이상 또는 영문 3글자 이상\n      return nameRegex.test(name);\n    },\n    validatePhoneNumber(phoneNumber) {\n      const phoneRegex = /^0\\d{2,3}-?\\d{3,4}-?\\d{4}$/; // 0으로 시작하고 하이픈 또는 공백 허용한 형식\n      return phoneRegex.test(phoneNumber);\n    },\n    execDaumPostcode() {\n      new window.daum.Postcode({\n        oncomplete: data => {\n          if (this.extraAddress !== '') {\n            this.extraAddress = '';\n          }\n          if (data.userSelectedType === 'R') {\n            // 사용자가 도로명 주소를 선택했을 경우\n            this.address = data.roadAddress;\n          } else {\n            // 사용자가 지번 주소를 선택했을 경우(J)\n            this.address = data.jibunAddress;\n          }\n\n          // 사용자가 선택한 주소가 도로명 타입일때 참고항목을 조합한다.\n          if (data.userSelectedType === 'R') {\n            // 법정동명이 있을 경우 추가한다. (법정리는 제외)\n            // 법정동의 경우 마지막 문자가 \"동/로/가\"로 끝난다.\n            if (data.bname !== '' && /[동|로|가]$/g.test(data.bname)) {\n              this.extraAddress += data.bname;\n            }\n            // 건물명이 있고, 공동주택일 경우 추가한다.\n            if (data.buildingName !== '' && data.apartment === 'Y') {\n              this.extraAddress += this.extraAddress !== '' ? `, ${data.buildingName}` : data.buildingName;\n            }\n            // 표시할 참고항목이 있을 경우, 괄호까지 추가한 최종 문자열을 만든다.\n            if (this.extraAddress !== '') {\n              this.extraAddress = `(${this.extraAddress})`;\n            }\n          } else {\n            this.extraAddress = '';\n          }\n        }\n      }).open();\n    }\n  }\n};","map":{"version":3,"names":["data","name","phoneNumber","address","extraAddress","methods","submitForm","validateName","validatePhoneNumber","console","log","nameRegex","test","phoneRegex","execDaumPostcode","window","daum","Postcode","oncomplete","userSelectedType","roadAddress","jibunAddress","bname","buildingName","apartment","open"],"sources":["/Users/kakao/Documents/balaan/src/components/secondStep.vue"],"sourcesContent":["<template>\n    <div>\n      <form @submit.prevent=\"submitForm\">\n        <div>\n          <label for=\"name\">이름</label>\n          <input type=\"text\" id=\"name\" v-model=\"name\" required>\n        </div>\n        <div>\n          <label for=\"phoneNumber\">연락처</label>\n          <input type=\"text\" id=\"phoneNumber\" v-model=\"phoneNumber\" required>\n        </div>\n        <div>\n            <label for=\"phoneNumber\">주소</label>\n            <button @click=\"execDaumPostcode\">주소검색</button> <br>\n            <input type=\"text\" v-model=\"address\" readonly>\n            <input type=\"text\" v-model=\"extraAddress\" readonly>\n        </div>\n        <div>\n          <button type=\"submit\">다음</button>\n        </div>\n      </form>\n    </div>\n  </template>\n  \n  <script>\n  export default {\n    data() {\n      return {\n        name: '',\n        phoneNumber: '',\n        address: '',\n        extraAddress: ''\n      };\n    },\n    methods: {\n      submitForm() {\n        if (this.validateName(this.name) && this.validatePhoneNumber(this.phoneNumber)) {\n          // 이름과 핸드폰 번호가 유효한 경우에만 처리\n          console.log('폼이 제출되었습니다!');\n          // 다음 단계로 라우팅\n          // this.$router.push('/nextStep');\n        } else {\n          console.log('유효하지 않은 입력입니다.');\n        }\n      },\n      validateName(name) {\n        const nameRegex = /^[가-힣]{2,}|[a-zA-Z]{3,}$/; // 한글 2글자 이상 또는 영문 3글자 이상\n        return nameRegex.test(name);\n      },\n      validatePhoneNumber(phoneNumber) {\n        const phoneRegex = /^0\\d{2,3}-?\\d{3,4}-?\\d{4}$/; // 0으로 시작하고 하이픈 또는 공백 허용한 형식\n        return phoneRegex.test(phoneNumber);\n      },\n      execDaumPostcode() {\n      new window.daum.Postcode({\n        oncomplete: (data) => {\n          if (this.extraAddress !== '') {\n            this.extraAddress = '';\n          }\n          if (data.userSelectedType === 'R') {\n            // 사용자가 도로명 주소를 선택했을 경우\n            this.address = data.roadAddress;\n          } else {\n            // 사용자가 지번 주소를 선택했을 경우(J)\n            this.address = data.jibunAddress;\n          }\n\n          // 사용자가 선택한 주소가 도로명 타입일때 참고항목을 조합한다.\n          if (data.userSelectedType === 'R') {\n            // 법정동명이 있을 경우 추가한다. (법정리는 제외)\n            // 법정동의 경우 마지막 문자가 \"동/로/가\"로 끝난다.\n            if (data.bname !== '' && /[동|로|가]$/g.test(data.bname)) {\n              this.extraAddress += data.bname;\n            }\n            // 건물명이 있고, 공동주택일 경우 추가한다.\n            if (data.buildingName !== '' && data.apartment === 'Y') {\n              this.extraAddress +=\n                this.extraAddress !== ''\n                  ? `, ${data.buildingName}`\n                  : data.buildingName;\n            }\n            // 표시할 참고항목이 있을 경우, 괄호까지 추가한 최종 문자열을 만든다.\n            if (this.extraAddress !== '') {\n              this.extraAddress = `(${this.extraAddress})`;\n            }\n          } else {\n            this.extraAddress = '';\n          }\n        }\n      }).open();\n    }\n    }\n  };\n  </script>"],"mappings":"AAyBE,eAAe;EACbA,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,IAAI,EAAE,EAAE;MACRC,WAAW,EAAE,EAAE;MACfC,OAAO,EAAE,EAAE;MACXC,YAAY,EAAE;IAChB,CAAC;EACH,CAAC;EACDC,OAAO,EAAE;IACPC,UAAUA,CAAA,EAAG;MACX,IAAI,IAAI,CAACC,YAAY,CAAC,IAAI,CAACN,IAAI,KAAK,IAAI,CAACO,mBAAmB,CAAC,IAAI,CAACN,WAAW,CAAC,EAAE;QAC9E;QACAO,OAAO,CAACC,GAAG,CAAC,aAAa,CAAC;QAC1B;QACA;MACF,OAAO;QACLD,OAAO,CAACC,GAAG,CAAC,gBAAgB,CAAC;MAC/B;IACF,CAAC;IACDH,YAAYA,CAACN,IAAI,EAAE;MACjB,MAAMU,SAAQ,GAAI,0BAA0B,EAAE;MAC9C,OAAOA,SAAS,CAACC,IAAI,CAACX,IAAI,CAAC;IAC7B,CAAC;IACDO,mBAAmBA,CAACN,WAAW,EAAE;MAC/B,MAAMW,UAAS,GAAI,4BAA4B,EAAE;MACjD,OAAOA,UAAU,CAACD,IAAI,CAACV,WAAW,CAAC;IACrC,CAAC;IACDY,gBAAgBA,CAAA,EAAG;MACnB,IAAIC,MAAM,CAACC,IAAI,CAACC,QAAQ,CAAC;QACvBC,UAAU,EAAGlB,IAAI,IAAK;UACpB,IAAI,IAAI,CAACI,YAAW,KAAM,EAAE,EAAE;YAC5B,IAAI,CAACA,YAAW,GAAI,EAAE;UACxB;UACA,IAAIJ,IAAI,CAACmB,gBAAe,KAAM,GAAG,EAAE;YACjC;YACA,IAAI,CAAChB,OAAM,GAAIH,IAAI,CAACoB,WAAW;UACjC,OAAO;YACL;YACA,IAAI,CAACjB,OAAM,GAAIH,IAAI,CAACqB,YAAY;UAClC;;UAEA;UACA,IAAIrB,IAAI,CAACmB,gBAAe,KAAM,GAAG,EAAE;YACjC;YACA;YACA,IAAInB,IAAI,CAACsB,KAAI,KAAM,EAAC,IAAK,WAAW,CAACV,IAAI,CAACZ,IAAI,CAACsB,KAAK,CAAC,EAAE;cACrD,IAAI,CAAClB,YAAW,IAAKJ,IAAI,CAACsB,KAAK;YACjC;YACA;YACA,IAAItB,IAAI,CAACuB,YAAW,KAAM,EAAC,IAAKvB,IAAI,CAACwB,SAAQ,KAAM,GAAG,EAAE;cACtD,IAAI,CAACpB,YAAW,IACd,IAAI,CAACA,YAAW,KAAM,EAAC,GAClB,KAAIJ,IAAI,CAACuB,YAAa,KACvBvB,IAAI,CAACuB,YAAY;YACzB;YACA;YACA,IAAI,IAAI,CAACnB,YAAW,KAAM,EAAE,EAAE;cAC5B,IAAI,CAACA,YAAW,GAAK,IAAG,IAAI,CAACA,YAAa,GAAE;YAC9C;UACF,OAAO;YACL,IAAI,CAACA,YAAW,GAAI,EAAE;UACxB;QACF;MACF,CAAC,CAAC,CAACqB,IAAI,CAAC,CAAC;IACX;EACA;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}