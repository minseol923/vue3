{"ast":null,"code":"import { createElementVNode as _createElementVNode, vModelText as _vModelText, withDirectives as _withDirectives, withModifiers as _withModifiers, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = /*#__PURE__*/_createElementVNode(\"label\", {\n  for: \"name\"\n}, \"이름\", -1 /* HOISTED */);\nconst _hoisted_2 = /*#__PURE__*/_createElementVNode(\"label\", {\n  for: \"phoneNumber\"\n}, \"연락처\", -1 /* HOISTED */);\nconst _hoisted_3 = /*#__PURE__*/_createElementVNode(\"div\", null, [/*#__PURE__*/_createElementVNode(\"button\", {\n  type: \"submit\"\n}, \"다음\")], -1 /* HOISTED */);\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", null, [_createElementVNode(\"form\", {\n    onSubmit: _cache[6] || (_cache[6] = _withModifiers((...args) => $options.submitForm && $options.submitForm(...args), [\"prevent\"]))\n  }, [_createElementVNode(\"div\", null, [_hoisted_1, _withDirectives(_createElementVNode(\"input\", {\n    type: \"text\",\n    id: \"name\",\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $data.name = $event),\n    required: \"\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $data.name]])]), _createElementVNode(\"div\", null, [_hoisted_2, _withDirectives(_createElementVNode(\"input\", {\n    type: \"text\",\n    id: \"phoneNumber\",\n    \"onUpdate:modelValue\": _cache[1] || (_cache[1] = $event => $data.phoneNumber = $event),\n    required: \"\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $data.phoneNumber]])]), _createElementVNode(\"div\", null, [_withDirectives(_createElementVNode(\"input\", {\n    type: \"text\",\n    \"onUpdate:modelValue\": _cache[2] || (_cache[2] = $event => $data.postcode = $event),\n    readonly: \"\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $data.postcode]]), _withDirectives(_createElementVNode(\"input\", {\n    type: \"text\",\n    \"onUpdate:modelValue\": _cache[3] || (_cache[3] = $event => $data.address = $event),\n    readonly: \"\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $data.address]]), _withDirectives(_createElementVNode(\"input\", {\n    type: \"text\",\n    \"onUpdate:modelValue\": _cache[4] || (_cache[4] = $event => $data.extraAddress = $event),\n    readonly: \"\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $data.extraAddress]]), _createElementVNode(\"button\", {\n    onClick: _cache[5] || (_cache[5] = (...args) => $options.execDaumPostcode && $options.execDaumPostcode(...args))\n  }, \"주소검색\")]), _hoisted_3], 32 /* NEED_HYDRATION */)]);\n}","map":{"version":3,"names":["_createElementVNode","for","type","_createElementBlock","onSubmit","_cache","_withModifiers","args","$options","submitForm","_hoisted_1","id","$data","name","$event","required","_hoisted_2","phoneNumber","postcode","readonly","address","extraAddress","onClick","execDaumPostcode","_hoisted_3"],"sources":["/Users/kakao/Documents/balaan/src/components/secondStep.vue"],"sourcesContent":["<template>\n    <div>\n      <form @submit.prevent=\"submitForm\">\n        <div>\n          <label for=\"name\">이름</label>\n          <input type=\"text\" id=\"name\" v-model=\"name\" required>\n        </div>\n        <div>\n          <label for=\"phoneNumber\">연락처</label>\n          <input type=\"text\" id=\"phoneNumber\" v-model=\"phoneNumber\" required>\n        </div>\n        <div>\n            <input type=\"text\" v-model=\"postcode\" readonly>\n            <input type=\"text\" v-model=\"address\" readonly>\n            <input type=\"text\" v-model=\"extraAddress\" readonly>\n            <button @click=\"execDaumPostcode\">주소검색</button>\n        </div>\n        <div>\n          <button type=\"submit\">다음</button>\n        </div>\n      </form>\n    </div>\n  </template>\n  \n  <script>\n  export default {\n    data() {\n      return {\n        name: '',\n        phoneNumber: '',\n        postcode: '',\n        address: '',\n        extraAddress: ''\n      };\n    },\n    methods: {\n      submitForm() {\n        if (this.validateName(this.name) && this.validatePhoneNumber(this.phoneNumber)) {\n          // 이름과 핸드폰 번호가 유효한 경우에만 처리\n          console.log('폼이 제출되었습니다!');\n          // 다음 단계로 라우팅\n          // this.$router.push('/nextStep');\n        } else {\n          console.log('유효하지 않은 입력입니다.');\n        }\n      },\n      validateName(name) {\n        const nameRegex = /^[가-힣]{2,}|[a-zA-Z]{3,}$/; // 한글 2글자 이상 또는 영문 3글자 이상\n        return nameRegex.test(name);\n      },\n      validatePhoneNumber(phoneNumber) {\n        const phoneRegex = /^0\\d{2,3}-?\\d{3,4}-?\\d{4}$/; // 0으로 시작하고 하이픈 또는 공백 허용한 형식\n        return phoneRegex.test(phoneNumber);\n      },\n      execDaumPostcode() {\n      new window.daum.Postcode({\n        oncomplete: (data) => {\n          if (this.extraAddress !== '') {\n            this.extraAddress = '';\n          }\n          if (data.userSelectedType === 'R') {\n            // 사용자가 도로명 주소를 선택했을 경우\n            this.address = data.roadAddress;\n          } else {\n            // 사용자가 지번 주소를 선택했을 경우(J)\n            this.address = data.jibunAddress;\n          }\n\n          // 사용자가 선택한 주소가 도로명 타입일때 참고항목을 조합한다.\n          if (data.userSelectedType === 'R') {\n            // 법정동명이 있을 경우 추가한다. (법정리는 제외)\n            // 법정동의 경우 마지막 문자가 \"동/로/가\"로 끝난다.\n            if (data.bname !== '' && /[동|로|가]$/g.test(data.bname)) {\n              this.extraAddress += data.bname;\n            }\n            // 건물명이 있고, 공동주택일 경우 추가한다.\n            if (data.buildingName !== '' && data.apartment === 'Y') {\n              this.extraAddress +=\n                this.extraAddress !== ''\n                  ? `, ${data.buildingName}`\n                  : data.buildingName;\n            }\n            // 표시할 참고항목이 있을 경우, 괄호까지 추가한 최종 문자열을 만든다.\n            if (this.extraAddress !== '') {\n              this.extraAddress = `(${this.extraAddress})`;\n            }\n          } else {\n            this.extraAddress = '';\n          }\n          // 우편번호를 입력한다.\n          this.postcode = data.zonecode;\n        }\n      }).open();\n    }\n\n    }\n  };\n  </script>"],"mappings":";gCAIUA,mBAAA,CAA4B;EAArBC,GAAG,EAAC;AAAM,GAAC,IAAE;gCAIpBD,mBAAA,CAAoC;EAA7BC,GAAG,EAAC;AAAa,GAAC,KAAG;gCAS9BD,mBAAA,CAEM,c,aADJA,mBAAA,CAAiC;EAAzBE,IAAI,EAAC;AAAQ,GAAC,IAAE,E;;;uBAjB9BC,mBAAA,CAoBM,cAnBJH,mBAAA,CAkBO;IAlBAI,QAAM,EAAAC,MAAA,QAAAA,MAAA,MAAAC,cAAA,KAAAC,IAAA,KAAUC,QAAA,CAAAC,UAAA,IAAAD,QAAA,CAAAC,UAAA,IAAAF,IAAA,CAAU;MAC/BP,mBAAA,CAGM,cAFJU,UAA4B,E,gBAC5BV,mBAAA,CAAqD;IAA9CE,IAAI,EAAC,MAAM;IAACS,EAAE,EAAC,MAAM;+DAAUC,KAAA,CAAAC,IAAI,GAAAC,MAAA;IAAEC,QAAQ,EAAR;iDAANH,KAAA,CAAAC,IAAI,E,KAE5Cb,mBAAA,CAGM,cAFJgB,UAAoC,E,gBACpChB,mBAAA,CAAmE;IAA5DE,IAAI,EAAC,MAAM;IAACS,EAAE,EAAC,aAAa;+DAAUC,KAAA,CAAAK,WAAW,GAAAH,MAAA;IAAEC,QAAQ,EAAR;iDAAbH,KAAA,CAAAK,WAAW,E,KAE1DjB,mBAAA,CAKM,c,gBAJFA,mBAAA,CAA+C;IAAxCE,IAAI,EAAC,MAAM;+DAAUU,KAAA,CAAAM,QAAQ,GAAAJ,MAAA;IAAEK,QAAQ,EAAR;iDAAVP,KAAA,CAAAM,QAAQ,E,mBACpClB,mBAAA,CAA8C;IAAvCE,IAAI,EAAC,MAAM;+DAAUU,KAAA,CAAAQ,OAAO,GAAAN,MAAA;IAAEK,QAAQ,EAAR;iDAATP,KAAA,CAAAQ,OAAO,E,mBACnCpB,mBAAA,CAAmD;IAA5CE,IAAI,EAAC,MAAM;+DAAUU,KAAA,CAAAS,YAAY,GAAAP,MAAA;IAAEK,QAAQ,EAAR;iDAAdP,KAAA,CAAAS,YAAY,E,GACxCrB,mBAAA,CAA+C;IAAtCsB,OAAK,EAAAjB,MAAA,QAAAA,MAAA,UAAAE,IAAA,KAAEC,QAAA,CAAAe,gBAAA,IAAAf,QAAA,CAAAe,gBAAA,IAAAhB,IAAA,CAAgB;KAAE,MAAI,E,GAE1CiB,UAEM,C"},"metadata":{},"sourceType":"module","externalDependencies":[]}