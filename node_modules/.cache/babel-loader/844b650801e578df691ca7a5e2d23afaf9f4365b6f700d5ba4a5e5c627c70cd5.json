{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nexport default {\n  data() {\n    return {\n      name: '',\n      phoneNumber: '',\n      address: '',\n      extraAddress: ''\n    };\n  },\n  created() {\n    // 페이지가 로드될 때 로컬 스토리지에서 name, phoneNumber, address 셋팅\n    this.name = localStorage.getItem('savedName') || '';\n    this.phoneNumber = localStorage.getItem('savedPhoneNumber') || '';\n    this.address = localStorage.getItem('savedAddress') || '';\n    this.extraAddress = localStorage.getItem('savedExtraAddress') || '';\n  },\n  computed: {\n    isFormValid() {\n      return this.name && this.phoneNumber && this.address && this.extraAddress && this.validatePhoneNumber(this.phoneNumber);\n    },\n    isValidateName() {\n      return this.validateName(this.name);\n    },\n    isValidatePhoneNumber() {\n      return this.validatePhoneNumber(this.phoneNumber);\n    }\n  },\n  methods: {\n    submitForm() {\n      if (this.validateName(this.name) && this.validatePhoneNumber(this.phoneNumber)) {\n        localStorage.setItem('savedName', this.name);\n        localStorage.setItem('savedPhoneNumber', this.phoneNumber);\n        localStorage.setItem('savedAddress', this.address);\n        localStorage.setItem('savedExtraAddress', this.extraAddress);\n\n        // 이름과 핸드폰 번호가 유효한 경우에만 처리\n        console.log('폼이 제출되었습니다!');\n        // 다음 단계로 라우팅\n        this.$router.push('/finalStep');\n      } else {\n        console.log('유효하지 않은 입력입니다.');\n      }\n    },\n    validateName(name) {\n      const nameRegex = /^[가-힣]{2,}|[a-zA-Z]{3,}$/; // 한글 2글자 이상 또는 영문 3글자 이상\n      return nameRegex.test(name);\n    },\n    validatePhoneNumber(phoneNumber) {\n      const phoneRegex = /^0\\d{2,3}[ -]?\\d{3,4}[ -]?\\d{4}$/;\n      return phoneRegex.test(phoneNumber);\n    },\n    daumPostcode() {\n      new window.daum.Postcode({\n        oncomplete: data => {\n          if (this.extraAddress !== '') {\n            this.extraAddress = '';\n          }\n          if (data.userSelectedType === 'R') {\n            // 도로명 주소를 선택했을 경우\n            this.address = data.roadAddress;\n          } else {\n            // 지번 주소를 선택했을 경우\n            this.address = data.jibunAddress;\n          }\n          if (data.userSelectedType === 'R') {\n            // 건물명이 있을 경우\n            if (data.buildingName !== '' && data.apartment === 'Y') {\n              this.extraAddress += this.extraAddress !== '' ? `, ${data.buildingName}` : data.buildingName;\n            }\n            // 표시할 참고항목이 있을 경우\n            if (this.extraAddress !== '') {\n              this.extraAddress = `(${this.extraAddress})`;\n            }\n          } else {\n            this.extraAddress = '';\n          }\n        }\n      }).open();\n    },\n    goBack() {\n      // 브라우저의 이전 페이지로 이동\n      window.history.back();\n    }\n  }\n};","map":{"version":3,"names":["data","name","phoneNumber","address","extraAddress","created","localStorage","getItem","computed","isFormValid","validatePhoneNumber","isValidateName","validateName","isValidatePhoneNumber","methods","submitForm","setItem","console","log","$router","push","nameRegex","test","phoneRegex","daumPostcode","window","daum","Postcode","oncomplete","userSelectedType","roadAddress","jibunAddress","buildingName","apartment","open","goBack","history","back"],"sources":["/Users/kakao/Documents/balaan/src/components/secondStep.vue"],"sourcesContent":["<template>\n    <div>\n      <form @submit.prevent=\"submitForm\">\n        <div>\n          <label for=\"name\">이름</label>\n          <input type=\"text\" id=\"name\" v-model=\"name\" required>\n          <div v-if=\"!isValidateName && name\">\n           <p>2글자 이상의 한글 완성형, 또는 3글자 이상의 영문 알파벳이고 그 외 특수문자, 숫자, 공백은 허용하지 않습니다.</p>\n          </div>\n        </div>\n        <div>\n          <label for=\"phoneNumber\">연락처</label>\n          <input type=\"text\" id=\"phoneNumber\" v-model=\"phoneNumber\" required>\n          <div v-if=\"!isValidatePhoneNumber && phoneNumber\">\n           <p>0으로 시작하며 중간 3-4자리, 마지막 4자리의 형식이며 하이픈 또는 공백 허용합니다.</p>\n          </div>\n        </div>\n        <div>\n            <label for=\"phoneNumber\">주소</label>\n            <button @click=\"daumPostcode\">주소검색</button> <br>\n            <input type=\"text\" v-model=\"address\" readonly>\n            <input type=\"text\" v-model=\"extraAddress\">\n        </div>\n        <div>\n            <button @click=\"goBack\">이전</button>\n            <button :disabled=\"!isFormValid\" type=\"submit\">다음</button>\n        </div>\n      </form>\n    </div>\n  </template>\n  \n  <script>\n  export default {\n    data() {\n      return {\n        name: '',\n        phoneNumber: '',\n        address: '',\n        extraAddress: ''\n      };\n    },\n    created() {\n    // 페이지가 로드될 때 로컬 스토리지에서 name, phoneNumber, address 셋팅\n    this.name = localStorage.getItem('savedName') || '';\n    this.phoneNumber = localStorage.getItem('savedPhoneNumber') || '';\n    this.address = localStorage.getItem('savedAddress') || '';\n    this.extraAddress = localStorage.getItem('savedExtraAddress') || '';\n\n  },\n    computed: {\n     isFormValid() {\n      return (\n        this.name &&\n        this.phoneNumber &&\n        this.address &&\n        this.extraAddress &&\n        this.validatePhoneNumber(this.phoneNumber)\n      );\n    },\n      isValidateName() {\n        return this.validateName(this.name);\n    },\n      isValidatePhoneNumber() {\n        return this.validatePhoneNumber(this.phoneNumber);\n    }\n  },\n    methods: {\n      submitForm() {\n        if (this.validateName(this.name) && this.validatePhoneNumber(this.phoneNumber)) {\n        localStorage.setItem('savedName', this.name);\n        localStorage.setItem('savedPhoneNumber', this.phoneNumber);\n        localStorage.setItem('savedAddress', this.address);\n        localStorage.setItem('savedExtraAddress', this.extraAddress);\n\n          // 이름과 핸드폰 번호가 유효한 경우에만 처리\n          console.log('폼이 제출되었습니다!');\n          // 다음 단계로 라우팅\n          this.$router.push('/finalStep');\n        } else {\n          console.log('유효하지 않은 입력입니다.');\n        }\n      },\n      validateName(name) {\n        const nameRegex = /^[가-힣]{2,}|[a-zA-Z]{3,}$/; // 한글 2글자 이상 또는 영문 3글자 이상\n        return nameRegex.test(name);\n      },\n      validatePhoneNumber(phoneNumber) {\n        const phoneRegex = /^0\\d{2,3}[ -]?\\d{3,4}[ -]?\\d{4}$/;\n        return phoneRegex.test(phoneNumber);\n      },\n      daumPostcode() {\n      new window.daum.Postcode({\n        oncomplete: (data) => {\n          if (this.extraAddress !== '') {\n            this.extraAddress = '';\n          }\n          if (data.userSelectedType === 'R') {\n            // 도로명 주소를 선택했을 경우\n            this.address = data.roadAddress;\n          } else {\n            // 지번 주소를 선택했을 경우\n            this.address = data.jibunAddress;\n          }\n          if (data.userSelectedType === 'R') {\n            // 건물명이 있을 경우\n            if (data.buildingName !== '' && data.apartment === 'Y') {\n              this.extraAddress +=\n                this.extraAddress !== ''\n                  ? `, ${data.buildingName}`\n                  : data.buildingName;\n            }\n            // 표시할 참고항목이 있을 경우\n            if (this.extraAddress !== '') {\n              this.extraAddress = `(${this.extraAddress})`;\n            }\n          } else {\n            this.extraAddress = '';\n          }\n        }\n      }).open();\n    },\n    goBack() {\n      // 브라우저의 이전 페이지로 이동\n      window.history.back();\n    }\n    }\n  };\n  </script>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}